// PESC-002 initial empty schema (models to be added in PESC-004)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// Enums
enum UserRole {
  GUIDE
  CLIENT
  ADMIN
}

enum ServiceStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum BookingStatus {
  REQUESTED
  CONFIRMED
  CANCELLED
  COMPLETED
  PAID
}

enum Currency {
  CLP
  USD
}

/// Models
model User {
  id         String    @id @default(cuid())
  email      String    @unique
  password   String    // hashed password (bcrypt)
  name       String
  bio        String?   @db.Text
  role       UserRole  @default(CLIENT)
  languages  String[]  // postgres text[] (e.g. ['es','en'])
  services   Service[]
  bookings   Booking[] @relation("ClientBookings")
  guideBookings Booking[] @relation("GuideBookings")
  address    Address?
  reviewsReceived Review[] @relation("GuideReviews")
  reviewsAuthored Review[] @relation("ClientReviews")
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Address {
  id        String  @id @default(cuid())
  user      User    @relation(fields: [userId], references: [id])
  userId    String  @unique
  regionCode String
  comunaCode String
  lat       Float?
  lng       Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([regionCode])
  @@index([comunaCode])
}

model Service {
  id          String        @id @default(cuid())
  guide       User          @relation(fields: [guideId], references: [id])
  guideId     String
  title       String
  description String        @db.Text
  pricePerDay Int           // in minor currency unit (e.g. CLP pesos)
  currency    Currency      @default(CLP)
  status      ServiceStatus @default(DRAFT)
  bookings    Booking[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([guideId])
  @@index([status])
}

model Booking {
  id         String        @id @default(cuid())
  service    Service       @relation(fields: [serviceId], references: [id])
  serviceId  String
  client     User          @relation("ClientBookings", fields: [clientId], references: [id])
  clientId   String
  guide      User          @relation("GuideBookings", fields: [guideId], references: [id])
  guideId    String
  startDate  DateTime
  endDate    DateTime
  totalPrice Int
  currency   Currency       @default(CLP)
  status     BookingStatus  @default(REQUESTED)
  review     Review?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  @@index([serviceId])
  @@index([guideId])
  @@index([clientId])
  // For checking overlaps you can query on guideId + date range; composite index aids filtering by guide and startDate
  @@index([guideId, startDate])
}

model Review {
  id         String   @id @default(cuid())
  booking    Booking  @relation(fields: [bookingId], references: [id])
  bookingId  String   @unique
  reviewer   User     @relation("ClientReviews", fields: [reviewerId], references: [id])
  reviewerId String
  guide      User     @relation("GuideReviews", fields: [guideId], references: [id])
  guideId    String
  rating     Int      // 1..5 validated at app level
  comment    String?  @db.Text
  isVisible  Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([guideId])
  @@index([reviewerId])
}
